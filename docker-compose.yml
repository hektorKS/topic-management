version: '3'
services:
  mongo-node1:
    image: mongo:4.2.8
    container_name: mongo-node1
    command: mongod --replSet replicaSet1
    restart: always
    volumes:
      - mongo-data-node1:/data/db
      - mongo-config-node1:/data/configdb
    networks:
      - mongo-cluster
    ports:
      - 27017:27017
  mongo-node2:
    image: mongo:4.2.8
    container_name: mongo-node2
    command: mongod --replSet replicaSet1
    restart: always
    volumes:
      - mongo-data-node2:/data/db
      - mongo-config-node2:/data/configdb
    networks:
      - mongo-cluster
    ports:
      - 27018:27017
  mongo-node3:
    image: mongo:4.2.8
    container_name: mongo-node3
    command: mongod --replSet replicaSet1
    restart: always
    volumes:
      - mongo-data-node3:/data/db
      - mongo-config-node3:/data/configdb
    networks:
      - mongo-cluster
    ports:
      - 27019:27017
  zookeeper:
    image: zookeeper:3.5.6
    container_name: zookeeper
    restart: always
    volumes:
      - zookeeper-data:/data
      - zookeeper-data-log:/datalog
      - zookeeper-log:/logs
    environment:
      zk_id: "1"
    network_mode: "host"
  kafka:
    image: wurstmeister/kafka:2.12-2.4.0
    container_name: kafka
    restart: always
    volumes:
      - kafka-data:/kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: "127.0.0.1:2181"
    network_mode: "host"
  topic-management-frontend:
    build:
      context: ./topic-management-frontend
      dockerfile: Dockerfile
    image: topic-management-frontend:1.0.0
    container_name: topic-management-frontend
    depends_on:
      - topic-service
      - bucket-service
      - school-service
      - user-service
      - message-service
    restart: always
    network_mode: "host"
  topic-service:
    build:
      context: ./services/topic-service
      dockerfile: Dockerfile
    image: topic-service:1.0.0
    container_name: topic-service
    restart: always
    network_mode: "host"
  bucket-service:
    build:
      context: ./services/bucket-service
      dockerfile: Dockerfile
    image: bucket-service:1.0.0
    container_name: bucket-service
    restart: always
    network_mode: "host"
  school-service:
    build:
      context: ./services/school-service
      dockerfile: Dockerfile
    image: school-service:1.0.0
    container_name: school-service
    restart: always
    network_mode: "host"
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    image: user-service:1.0.0
    container_name: user-service
    restart: always
    network_mode: "host"
  message-service:
    build:
      context: ./services/message-service
      dockerfile: Dockerfile
    image: message-service:1.0.0
    container_name: message-service
    restart: always
    network_mode: "host"
volumes:
  mongo-data-node1:
  mongo-config-node1:
  mongo-data-node2:
  mongo-config-node2:
  mongo-data-node3:
  mongo-config-node3:
  zookeeper-data:
  zookeeper-data-log:
  zookeeper-log:
  kafka-data:
networks:
  mongo-cluster:
